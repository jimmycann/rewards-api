swagger: "2.0"
info:
  version: 0.0.1
  title: Rewards API
  description: A membership API which allows returning customers to accrue rewards and redeem those rewards when they make future purchases.
  contact:
    name: Jimmy Cann
    email: mail@jimmycann.com
    url: https://jimmycann.com
  license:
    name: MIT
    url: https://github.com/yjimk/rewards-api/LICENSE.md
host: localhost:10010
basePath: /
schemes:
  - http
  - https
consumes:
  - application/json
  - application/x-www-form-urlencoded
produces:
  - application/json
paths:
  /api/v1/users/create:
    x-swagger-router-controller: UsersController
    post:
      description: Creates a new user
      operationId: createUser
      parameters:
        - name: user
          in: body
          description: Parameters required for creating a new user
          required: true
          schema:
            $ref: '#/definitions/NewUser'
      responses:
        "201":
          description: User has been created
          schema:
            $ref: '#/definitions/User'
        default:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/users/update:
    x-swagger-router-controller: UsersController
    put:
      description: Updates a user
      operationId: updateUser
      parameters:
        - name: user
          in: body
          description: Parameters required for updating a user. At least one property in the userData object is required.
          required: true
          schema:
            $ref: '#/definitions/UpdateUser'
      responses:
        "200":
          description: The user has been updated
          schema:
            $ref: '#/definitions/UpdateSuccess'
        "204":
          description: The request was processed but no user was found
        default:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/users:
    x-swagger-router-controller: UsersController
    get:
      description: Retrieves all users
      operationId: fetchAllUsers
      responses:
        "200":
          description: Returns an array containing all users' data
          schema:
            $ref: '#/definitions/UserArr'
        "204":
          description: The request was processed but no users were found
        default:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/users/search:
    x-swagger-router-controller: UsersController
    post:
      description: Retrieves all matching users
      operationId: searchUsers
      parameters:
        - name: user
          in: body
          description: The search query to be performed
          required: true
          schema:
            type: object
            required:
              - query
            properties:
              query:
                type: string
                description: The search query. Email, first & last name.
                minLength: 2
                maxLength: 20
      responses:
        "200":
          description: Returns an array containing matching users' data
          schema:
            $ref: '#/definitions/UserArr'
        "204":
          description: The request was processed but no users were found
        default:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/users/{userId}:
    x-swagger-router-controller: UsersController
    get:
      description: Retrieves a single user
      operationId: fetchOneUser
      parameters:
        - name: userId
          in: path
          required: true
          type: integer
      responses:
        "200":
          description: Returns a users' data
          schema:
            $ref: '#/definitions/User'
        "204":
          description: The request was processed but no user was found
        default:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: Deletes a user
      operationId: removeUser
      parameters:
        - name: userId
          in: path
          required: true
          type: integer
      responses:
        "200":
          description: A user has been deleted
          schema:
            $ref: '#/definitions/UpdateSuccess'
        "204":
          description: The request was processed but no user was found
        default:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/titles/create:
    x-swagger-router-controller: TitlesController
    post:
      description: Creates a new title
      operationId: createTitle
      parameters:
        - name: title
          in: body
          description: Parameters required for creating a new title
          required: true
          schema:
            $ref: '#/definitions/NewTitle'
      responses:
        "201":
          description: Title has been created
          schema:
            $ref: '#/definitions/Title'
        default:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/titles/update:
    x-swagger-router-controller: TitlesController
    put:
      description: Updates a title
      operationId: updateTitle
      parameters:
        - name: title
          in: body
          description: Parameters required for updating a title. At least one property in the titleData object is required.
          required: true
          schema:
            $ref: '#/definitions/UpdateTitle'
      responses:
        "200":
          description: The title has been updated
          schema:
            $ref: '#/definitions/UpdateSuccess'
        "204":
          description: The request was processed but no title was found
        default:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/titles:
    x-swagger-router-controller: TitlesController
    get:
      description: Retrieves all titles
      operationId: fetchAllTitles
      responses:
        "200":
          description: Returns an array containing all titles' data
          schema:
            $ref: '#/definitions/TitleArr'
        "204":
          description: The request was processed but no titles were found
        default:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/titles/{titleId}:
    x-swagger-router-controller: TitlesController
    get:
      description: Retrieves a single title
      operationId: fetchOneTitle
      parameters:
        - name: titleId
          in: path
          required: true
          type: integer
      responses:
        "200":
          description: Returns a titles' data
          schema:
            $ref: '#/definitions/Title'
        "204":
          description: The request was processed but no title was found
        default:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: Deletes a title
      operationId: removeTitle
      parameters:
        - name: titleId
          in: path
          required: true
          type: integer
      responses:
        "200":
          description: A title has been deleted
          schema:
            $ref: '#/definitions/UpdateSuccess'
        "204":
          description: The request was processed but no title was found
        default:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/rewards/create:
    x-swagger-router-controller: RewardsController
    post:
      description: Creates a new reward
      operationId: createReward
      parameters:
        - name: reward
          in: body
          description: Parameters required for creating a new reward
          required: true
          schema:
            $ref: '#/definitions/NewReward'
      responses:
        "201":
          description: Reward has been created
          schema:
            $ref: '#/definitions/Reward'
        default:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/rewards/update:
    x-swagger-router-controller: RewardsController
    put:
      description: Updates a reward
      operationId: updateReward
      parameters:
        - name: reward
          in: body
          description: Parameters required for updating a reward.  At least one property in the rewardData object is required.
          required: true
          schema:
            $ref: '#/definitions/UpdateReward'
      responses:
        "200":
          description: The reward has been updated
          schema:
            $ref: '#/definitions/UpdateSuccess'
        "204":
          description: The request was processed but no reward was found
        default:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/rewards:
    x-swagger-router-controller: RewardsController
    get:
      description: Retrieves all rewards
      operationId: fetchAllRewards
      responses:
        "200":
          description: Returns an array containing all rewards' data
          schema:
            $ref: '#/definitions/RewardArr'
        "204":
          description: The request was processed but no rewards were found
        default:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/Error'
  /api/v1/rewards/{rewardId}:
    x-swagger-router-controller: RewardsController
    get:
      description: Retrieves a single reward
      operationId: fetchOneReward
      parameters:
        - name: rewardId
          in: path
          required: true
          type: integer
      responses:
        "200":
          description: Returns a rewards' data
          schema:
            $ref: '#/definitions/Reward'
        "204":
          description: The request was processed but no reward was found
        default:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/Error'
    delete:
      description: Deletes a reward
      operationId: removeReward
      parameters:
        - name: rewardId
          in: path
          required: true
          type: integer
      responses:
        "200":
          description: A reward has been deleted
          schema:
            $ref: '#/definitions/UpdateSuccess'
        "204":
          description: The request was processed but no reward was found
        default:
          description: Unexpected Error
          schema:
            $ref: '#/definitions/Error'
  /swagger:
    x-swagger-pipe: swagger_raw

definitions:
  UpdateSuccess:
    type: object
    description: On update success the API will return an object containing success as true.
    properties:
      success:
        type: boolean

  User:
    allOf:
      - $ref: '#/definitions/NewUser'
      - required:
        - id
        properties:
          id:
            type: integer
            format: int64

  UserArr:
    type: array
    items:
      $ref: '#/definitions/User'

  NewUser:
    type: object
    required:
      - firstName
      - lastName
      - email
    properties:
      titleId:
        type: integer
        description: The users' titleId (Default 1)
        minLength: 1
        maxLength: 2
      firstName:
        type: string
        description: The users' first name
        minLength: 2
        maxLength: 64
      lastName:
        type: string
        description: The users' last name
        minLength: 2
        maxLength: 64
      email:
        type: string
        description: The users' email address
        minLength: 3
        maxLength: 254
      mob:
        type: string
        description: The users' mobile phone number
        minLength: 8
        maxLength: 16
      level:
        type: integer
        description: The users' level (Default 1)
        minLength: 1
        maxLength: 3

  UpdateUser:
    type: object
    required:
      - userId
    properties:
      userId:
        type: integer
        description: The ID of the user that is to be updted
        minLength: 1
        maxLength: 11
      userData:
        type: object
        description: An object containing the user data to update. At least one paramter in this object is required
      userData.titleId:
        type: integer
        description: The users' titleId
        minLength: 1
        maxLength: 2
      userData.firstName:
        type: string
        description: The users' first name
        minLength: 2
        maxLength: 64
      userData.lastName:
        type: string
        description: The users' last name
        minLength: 2
        maxLength: 64
      userData.email:
        type: string
        description: The users' email address
        minLength: 3
        maxLength: 254
      userData.mob:
        type: string
        description: The users' mobile phone number
        minLength: 8
        maxLength: 16
      userData.level:
        type: integer
        description: The users' level
        minLength: 1
        maxLength: 3

  Title:
    allOf:
      - $ref: '#/definitions/NewTitle'
      - required:
        - id
        properties:
          id:
            type: integer
            format: int64

  TitleArr:
    type: array
    items:
      $ref: '#/definitions/Title'

  NewTitle:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        description: The title name
        minLength: 2
        maxLength: 64
      description:
        type: string
        description: The titles' description
        maxLength: 255

  UpdateTitle:
    type: object
    required:
      - titleId
    properties:
      titleId:
        type: integer
        description: The ID of the title that is to be updted
        minLength: 1
        maxLength: 11
      titleData:
        type: object
        description: An object containing the title data to update. At least one paramter in this object is required
      titleData.name:
        type: string
        description: The title name
        minLength: 2
        maxLength: 64
      titleData.description:
        type: string
        description: The titles' description
        maxLength: 255

  Reward:
    allOf:
      - $ref: '#/definitions/NewReward'
      - required:
        - id
        properties:
          id:
            type: integer
            format: int64

  RewardArr:
    type: array
    items:
      $ref: '#/definitions/Reward'

  NewReward:
    type: object
    required:
      - name
    properties:
      name:
        type: string
        description: The rewards' name
        minLength: 2
        maxLength: 64
      description:
        type: string
        description: The rewards' description
        maxLength: 255
      level:
        type: integer
        description: The user level at which the reward is unlocked
        minLength: 1
        maxLength: 3
      minQty:
        type: integer
        description: The minimum quantity required to trigger the reward
        maxLength: 5
      minOrderAmt:
        type: integer
        description: The minimum order amount required to trigger the reward
        maxLength: 5          
      products:
        type: array
        description: An array of products for which this reward is applicable eg. ['coffee', 'cakes']. Set as null to apply to all products.
        items:
          type: string
      discountType:
        type: string
        description: The type of discount to be applied. 'pc' for precentage, 'abs' for an absolute dollar value. 'pc' or 'abs' are the only values accepted
        minLength: 2
        maxLength: 3
      amount:
        type: integer
        description: The percentage or dollar discount amount (depending on discountType setting) that applies to the reward
        maxLength: 5

  UpdateReward:
    type: object
    required:
      - rewardId
    properties:
      rewardId:
        type: integer
        description: The ID of the reward that is to be updted
        minLength: 1
        maxLength: 11
      rewardData:
        type: object
        description: An object containing the reward data to update. At least one paramter in this object is required
      rewardData.name:
        type: string
        description: The rewards' name
        minLength: 2
        maxLength: 64
      rewardData.description:
        type: string
        description: The rewards' description
        maxLength: 255
      rewardData.level:
        type: integer
        description: The user level at which the reward is unlocked
        minLength: 1
        maxLength: 3
      rewardData.minQty:
        type: integer
        description: The minimum quantity required to trigger the reward
        maxLength: 5
      rewardData.minOrderAmt:
        type: integer
        description: The minimum order amount required to trigger the reward
        maxLength: 5        
      rewardData.products:
        type: array
        description: An array of products for which this reward is applicable eg. ['coffee', 'cakes']. Set as null to apply to all products.
        items:
          type: string
      rewardData.discountType:
        type: string
        description: The type of discount to be applied. 'pc' for precentage, 'abs' for an absolute dollar value. 'pc' or 'abs' are the only values accepted
        minLength: 2
        maxLength: 3
      rewardData.amount:
        type: integer
        description: The percentage or dollar discount amount (depending on discountType setting) that applies to the reward
        maxLength: 5

  Error:
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
